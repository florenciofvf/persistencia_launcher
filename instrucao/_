/*abrir_compilar*/

defun filtrar([h:t], f) {
	if([h:t] = []) {
		return [];
	}
	if(f(h)) {
		return h : filtrar(t, f);
	} else {
		return filtrar(t, f);
	}
}

defun mapear([h:t], f) {
	if([h:t] = []) {
		return [];
	}
	return f(h) : mapear(t, f);
}

defun reduzirD([h:t], f, resp) {
	if([h:t] = []) {
		return resp;
	}
	return f(h, reduzirD(t, f, resp));
}

defun reduzirE([h:t], f, resp) {
	if([h:t] = []) {
		return resp;
	}
	return reduzirE(t, f, f(h, resp));
}

defun reduzir([h:t], f, resp) {
	return reduzirE([h:t], f, resp);
}

defun find([h:t], f, default) {
	if([h:t] = []) {
		return default;
	}
	if(f(h)) {
		return h;
	}
	return find(t, f, default);
}

defun forEach([h:t], f) : void {
	if([h:t] = []) {
		return;
	}
	f(h);
	forEach(t, f);
	return;
}